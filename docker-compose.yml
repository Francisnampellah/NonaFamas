version: '3.8'

services:
  traefik:
    image: traefik:2.10
    container_name: traefik
    restart: always
    networks:
      - proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik.yml:/traefik.yml:ro"
      - "./acme.json:/acme.json"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      # Dashboard
      - "traefik.http.routers.dashboard.rule=Host(`traefik.nonas.bluetech.software`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"

  famasi:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: famasi
    restart: always
    ports:
      - "3000:3000"
    networks:
      - proxy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/famasi_db
      - NODE_ENV=production
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      # HTTP redirect to HTTPS
      - "traefik.http.routers.famasi-http.entrypoints=web"
      - "traefik.http.routers.famasi-http.rule=Host(`nonas.bluetech.software`)"
      - "traefik.http.routers.famasi-http.middlewares=redirect-to-https@docker"
      # HTTPS router
      - "traefik.http.routers.famasi.rule=Host(`nonas.bluetech.software`)"
      - "traefik.http.routers.famasi.entrypoints=websecure"
      - "traefik.http.routers.famasi.tls.certresolver=letsencrypt"
      - "traefik.http.services.famasi.loadbalancer.server.port=3000"
    depends_on:
      - db

  db:
    image: postgres:15-alpine
    container_name: famasi-db
    restart: always
    networks:
      - proxy
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-famasi_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

networks:
  proxy:
    external: true

volumes:
  postgres_data: {}

# Redirect middleware definition
# This can be placed in a separate dynamic configuration file or using labels on a dedicated service
# Example dynamic config (file: redirect.yml):
# http:
#   middlewares:
#     redirect-to-https:
#       redirectScheme:
#         scheme: https
#         permanent: true
