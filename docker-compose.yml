version: '3.8'

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      - './traefik.yml:/etc/traefik/traefik.yml:ro'
      - './acme.json:/acme.json'
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=proxy'
      # Dashboard configuration
      - 'traefik.http.routers.traefik.rule=Host(`traefik.bluetech.software`)'
      - 'traefik.http.routers.traefik.service=api@internal'
      - 'traefik.http.routers.traefik.entrypoints=websecure'
      - 'traefik.http.routers.traefik.tls=true'
      - 'traefik.http.routers.traefik.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.traefik.middlewares=auth'
      # Basic auth middleware
      - 'traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$xyz123' # Replace with your hashed password

  famasi:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: famasi
    restart: unless-stopped
    networks:
      - proxy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=production
    depends_on:
      - db
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=proxy'
      - 'traefik.http.routers.famasi.rule=Host(`nonas.bluetech.software`)'
      - 'traefik.http.routers.famasi.entrypoints=websecure'
      - 'traefik.http.routers.famasi.tls=true'
      - 'traefik.http.routers.famasi.tls.certresolver=letsencrypt'
      - 'traefik.http.services.famasi.loadbalancer.server.port=3000'

  db:
    image: postgres:15-alpine
    container_name: famasi-db
    restart: unless-stopped
    networks:
      - proxy
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-famasi_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

networks:
  proxy:
    external: true

volumes:
  postgres_data:





