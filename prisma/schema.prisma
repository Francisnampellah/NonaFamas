generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMINISTRATOR
  PHARMACIST
}

enum TransactionType {
  EXPENSE
  SALE
  FINANCE
  PURCHASE
}

model User {
  id         Int          @id @default(autoincrement())
  name       String
  email      String       @unique
  password   String
  role       UserRole     @default(PHARMACIST)
  purchases  Purchase[]   
  sells      Sell[]
  transactions Transaction[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@index([role])
}

model Manufacturer {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  medicines   Medicine[]   
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Unit {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  medicines   Medicine[]   
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Category {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  medicines   Medicine[]   
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Supplier {
  id          Int          @id @default(autoincrement())
  name        String
  contact     String? 
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Batch {
  id           Int          @id @default(autoincrement())
  purchaseDate DateTime     @default(now())
  purchases    Purchase[]   
  createdAt    DateTime     @default(now())
  note         String?
  updatedAt    DateTime     @updatedAt
}

model Medicine {
  id             Int           @id @default(autoincrement())
  name           String
  manufacturerId Int
  unitId         Int
  categoryId     Int
  dosage         String?       // Optional dosage field
  sellPrice      Decimal       @db.Decimal(10,2)
  manufacturer   Manufacturer  @relation(fields: [manufacturerId], references: [id], onDelete: Restrict)
  unit           Unit          @relation(fields: [unitId], references: [id], onDelete: Restrict)
  category       Category      @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  stock          Stock?        
  purchases      Purchase[]    
  sells          Sell[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([manufacturerId])
  @@index([unitId])
  @@index([categoryId])
}


model Stock {
  id           Int        @id @default(autoincrement())
  medicineId   Int        @unique
  quantity     Int
  pricePerUnit Decimal?   @db.Decimal(10,2)
  medicine     Medicine   @relation(fields: [medicineId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}


model Transaction {
  id              Int              @id @default(autoincrement())
  referenceNumber String           @unique
  type            TransactionType
  amount          Int
  userId          Int
  note            String?
  taxApplied      Float?           // Percentage (e.g., 5.5 = 5.5%)
  sellId          Int?             @unique
  purchaseId      Int?             @unique
  user            User             @relation(fields: [userId], references: [id], onDelete: Restrict)
  sell            Sell?            @relation("SellTransaction", fields: [sellId], references: [id])
  purchase        Purchase?        @relation("PurchaseTransaction", fields: [purchaseId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([type])
  @@index([userId])
}

model Sell {
  id           Int        @id @default(autoincrement())
  medicineId   Int
  userId       Int
  quantity     Int
  totalPrice   Decimal    @db.Decimal(10,2)
  transaction  Transaction? @relation("SellTransaction")
  medicine     Medicine   @relation(fields: [medicineId], references: [id], onDelete: Restrict)
  user         User       @relation(fields: [userId], references: [id], onDelete: Restrict)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([medicineId])
  @@index([userId])
}

model Purchase {
  id            Int         @id @default(autoincrement())
  medicineId    Int
  batchId       Int
  userId        Int
  quantity      Int
  costPerUnit   Decimal     @db.Decimal(10,2)
  transaction   Transaction? @relation("PurchaseTransaction")
  medicine      Medicine    @relation(fields: [medicineId], references: [id], onDelete: Restrict)
  batch         Batch       @relation(fields: [batchId], references: [id], onDelete: Restrict)
  user          User        @relation(fields: [userId], references: [id], onDelete: Restrict)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

